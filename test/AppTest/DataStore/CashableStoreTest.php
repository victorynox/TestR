<?php
use App\DataStore\Cashable\CashableStore\CashableStore;
use App\DataStore\Cashable\CashableStore\MemoryGetAll;


/**
 * Created by PhpStorm.
 * User: root
 * Date: 31.03.16
 * Time: 18:08
 */
class CashableStoreTest extends PHPUnit_Framework_TestCase
{
    /** @var CashableStore */
    private $obj;


    public function setUp()
    {
        $memory = new MemoryGetAll();

        $memory->create(
            [
                'name' => 'Qqqq1',
                'surname' => 'Www1',
                'age' => '12',
            ]
        );
        $memory->create(
            [
                'name' => 'Qqqq2',
                'surname' => 'Www2',
                'age' => '13',
            ]
        );
        $memory->create(
            [
                'name' => 'Qqqq3',
                'surname' => 'Www3',
                'age' => '14',
            ]
        );

        $this->obj = new CashableStore($memory);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $person
     * @param $id
     * @dataProvider testReadCashableStoreDataProvider
     */
    public function testReadItemCashableStore($person, $id)
    {
        $item = $this->obj->read($id);
        $this->assertEquals($item['id'], $id);
        $this->assertEquals($item['name'], $person['name']);
        $this->assertEquals($item['surname'], $person['surname']);
        $this->assertEquals($item['age'], $person['age']);
    }

    public function testReadCashableStoreDataProvider()
    {
        return [
            [
                ['name' => 'Qqqq1',
                    'surname' => 'Www1',
                    'age' => '12'], 0
            ],
            [
                ['name' => 'Qqqq2',
                    'surname' => 'Www2',
                    'age' => '13'], 1
            ],
            [
                ['name' => 'Qqqq3',
                    'surname' => 'Www3',
                    'age' => '14'], 2
            ],
        ];
    }

    /**
     * @param $person
     * @throws Exception
     * @dataProvider testCreateCashableStoreDataProvider
     */
    public function testCreateItemCashableStore($person)
    {
        $this->obj->create($person);
        $this->assertFalse($this->obj->has($person['id']));
        $this->obj->refresh();
        $item = $this->obj->read($person['id']);
        $this->assertEquals($item['id'], $person['id']);
        $this->assertEquals($item['name'], $person['name']);
        $this->assertEquals($item['surname'], $person['surname']);
        $this->assertEquals($item['age'], $person['age']);
    }

    public function testCreateCashableStoreDataProvider()
    {
        return [
            [
                ['id' => 3,
                    'name' => 'Qqqq4',
                    'surname' => 'Www4',
                    'age' => '15']
            ],
            [
                [
                    'id' => 4,
                    'name' => 'Qqqq5',
                    'surname' => 'Www5',
                    'age' => '16']
            ],
            [
                [
                    'id' => 5,
                    'name' => 'Qqqq6',
                    'surname' => 'Www6',
                    'age' => '17']
            ],
        ];
    }

    /**
     * @dataProvider testUpdateCashableStoreDataProvider
     * @param $person
     * @throws Exception
     */
    public function testUpdateItemCashableStore($person)
    {
        $this->obj->update($person);

        $item = $this->obj->read($person['id']);
        $this->assertEquals($item['id'], $person['id']);
        $this->assertNotEquals($item['name'], $person['name']);
        $this->assertNotEquals($item['surname'], $person['surname']);
        $this->assertNotEquals($item['age'], $person['age']);

        $this->obj->refresh();
        $item = $this->obj->read($person['id']);
        $this->assertEquals($item['id'], $person['id']);
        $this->assertEquals($item['name'], $person['name']);
        $this->assertEquals($item['surname'], $person['surname']);
        $this->assertEquals($item['age'], $person['age']);
    }

    public function testUpdateCashableStoreDataProvider()
    {
        return [
            [
                ['id' => 1,
                    'name' => 'Qqqq4',
                    'surname' => 'Www4',
                    'age' => '15']
            ],
            [
                [
                    'id' => 2,
                    'name' => 'Qqqq5',
                    'surname' => 'Www5',
                    'age' => '16']
            ],
            [
                [
                    'id' => 0,
                    'name' => 'Qqqq6',
                    'surname' => 'Www6',
                    'age' => '17']
            ],
        ];
    }

    /**
     * @param $id
     * @throws Exception
     * @dataProvider testDeleteCashableStoreDataProvider
     */
    public function testDeleteItemCashableStore($id)
    {
        $this->obj->delete($id);
        $this->assertTrue($this->obj->has($id));
        $this->obj->refresh();
        $this->assertFalse($this->obj->has($id));

    }

    public function testDeleteCashableStoreDataProvider()
    {
        return [
            [1],
            [2],
            [0]
        ];
    }

    public function testDeleteAllItemCashableStore()
    {
        $keys = $this->obj->getKeys();

        $this->obj->deleteAll();

        foreach ($keys as $id) {
            $this->assertTrue($this->obj->has($id));
        }

        $this->obj->refresh();

        foreach ($keys as $id) {
            $this->assertFalse($this->obj->has($id));
        }
    }

    public function setUpWithoutDStore()
    {
        $ebayConfig = [
            'rootID' => "26429",
            'credentials' => [
                'appId' => 'VictorVa-ebayTest-PRD-d3890c490-e1aed2ce',
                'certId' => '6e510d0a-3919-40c0-ad67-b4a17f266310',
                'devId' => '6e510d0a-3919-40c0-ad67-b4a17f266310'
            ]
        ];
        $getEbayCategory = new \App\Action\GetEbayCategoryAction($ebayConfig);
        $this->obj = new CashableStore($getEbayCategory);
    }

    /**
     * @param $category
     * @dataProvider testItemCashableStoreWithoutGetAllDataStoreDataProvider
     */
    public function testReadItemCashableStoreWithoutGetAllDataStore($category)
    {
        $this->setUpWithoutDStore();

        $item = $this->obj->read($category['id']);

        $this->assertEquals($item['id'], $category['id']);

        $this->assertEquals($item['CategoryID'], $category['CategoryID']);
        $this->assertEquals($item['CategoryName'], $category['CategoryName']);
        $this->assertEquals($item['CategoryLevel'], $category['CategoryLevel']);
        $this->assertEquals($item['CategoryIDPath'], $category['CategoryIDPath']);
        $this->assertEquals($item['CategoryParentID'], $category['CategoryParentID']);
        $this->assertEquals($item['LeafCategory'], $category['LeafCategory']);

    }

    /**
     * @expectedException Exception
     * @param $category
     * @throws Exception
     * @expectedExceptionMessage Refreshable dont implement DataStoresInterface
     * @dataProvider testItemCashableStoreWithoutGetAllDataStoreDataProvider
     */
    public function testCreateItemCashableStoreWithoutGetAllDataStore($category)
    {
        $this->setUpWithoutDStore();
        $category['id'] = $category['id'] + rand(8, 50);
        $this->obj->create($category);
    }

    /**
     * @param $category
     * @throws Exception
     * @expectedException Exception
     * @dataProvider testItemCashableStoreWithoutGetAllDataStoreDataProvider
     * @expectedExceptionMessage Refreshable dont implement DataStoresInterface
     */
    public function testUpdateItemCashableStoreWithoutGetAllDataStore($category)
    {
        $this->setUpWithoutDStore();
        $this->obj->update($category);
    }

    /**
     * @param $category
     * @dataProvider testItemCashableStoreWithoutGetAllDataStoreDataProvider
     * @throws Exception
     * @expectedException Exception
     * @expectedExceptionMessage Refreshable dont implement DataStoresInterface
     */
    public function testDeleteItemCashableStoreWithoutGetAllDataStore($category)
    {
        $this->setUpWithoutDStore();
        $this->obj->delete($category['id']);
    }

    public function testItemCashableStoreWithoutGetAllDataStoreDataProvider()
    {
        return [
            [
                ['id' => 0,
                    'CategoryID' => '26429',
                    'CategoryName' => 'Boats',
                    'CategoryLevel' => 2,
                    'CategoryIDPath' => "6000:26429",
                    'CategoryParentID' => '6000',
                    'LeafCategory' => false]
            ]
        ];
        /*[
            'id' => 1,
            'CategoryID' => '63723',
            'CategoryName' => 'Fishing Boats',
            'CategoryLevel' => 3,
            'CategoryIDPath' => '6000:26429:63723',
            'CategoryParentID' => '26429',
            'LeafCategory' => false,
        ],
        [
            'id' => 2,
            'CategoryID' => '63724',
            'CategoryName' => 'Bass Fishing Boats',
            'CategoryLevel' => 4,
            'CategoryIDPath' => '6000:26429:63723:63724',
            'CategoryParentID' => '63723',
            'LeafCategory' => true,
        ],
        [
            'id' => 3,
            'CategoryID' => '63725',
            'CategoryName' => 'Inshore Saltwater Fishing',
            'CategoryLevel' => 4,
            'CategoryIDPath' => '6000:26429:63723:63725',
            'CategoryParentID' => '63723',
            'LeafCategory' => true,
        ],*/

    }

}
