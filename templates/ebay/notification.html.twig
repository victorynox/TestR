{% extends '@layout/layout.html.twig' %}

{% block stylesheets %}
    <link href="/scripts/dojo/dojo/resources/dojo.css" rel="stylesheet">
    <link href="/scripts/dojo/dijit/themes/claro/claro.css" rel="stylesheet">
    <link rel="stylesheet" href="/scripts/dojo/dojox/highlight/resources/highlight.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dojox/highlight/resources/pygments/colorful.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dgrid/css/dgrid.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dgrid/css/skins/claro.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dgrid/css/skins/claro.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dojox/grid/enhanced/resources/claro/EnhancedGrid.css"/>
    <link rel="stylesheet" href="/scripts/dojo/dojox/grid/enhanced/resources/EnhancedGrid_rtl.css"/>
    <link rel="stylesheet" href="/scripts/Smart/FilterEditor/resources/css/FilterEditor.css"/>
{% endblock stylesheets %}

{% block javascripts %}

    <script>
        var dojoConfig = {
            async: true,
            isDebug: true,
            // This code registers the correct location of the "demo"
            // package so we can load Dojo from the CDN whilst still
            // being able to load local modules
            packages: [
                {
                    name: "Rscript",
                    location: '/scripts'
                }
            ]
        };
    </script>
    <script src="/scripts/dojo/dojo/dojo.js"></script>
    <script>
        require([
            "dojo/dom",
            'dojo/_base/array',
            'dojo/json',
            "Rscript/scriptListConfigNew",
            "Rscript/RDataWidget/RDataWidget",
            "Rscript/Smart/TableControlPanel/TableControlPanelFactory",

            "Rscript/Smart/Composite/widget/Composite",
            'Rscript/Smart/FilterControlPanel/widget/FilterControlPanel',
            'Rscript/Smart/FilteredGrid/widget/FilteredGrid',
            'Rscript/Smart/TableWithConfiguration/widget/TableWithConfiguration',
            'Rscript/Smart/DataPreviewControlPanel/widget/DataPreviewControlPanel',

            'Rscript/Smart/extensions/Store/StoreRqlFilter',

            'dstore/RequestMemory',
            "dstore/Rest",
            'dstore/Trackable',
            "dojo/on",
            "dojox/widget/TitleGroup",
            "dijit/TitlePane",
            "dijit/Dialog",
            "dijit/layout/ContentPane",
            "dojox/xml/DomParser",
            "dojo/dom-construct",
            "dojo/_base/window",
            "dojo/_base/declare",
            'dojo/request',
            'dojo/_base/lang',
            "dojo/dom-style",

            "dojo/dom-style",
            "dojo/domReady!"
        ], function (dom,
                     array,
                     json,
                     scriptListConfig,
                     RDataWidget,
                     TableControlPanelFactory,
                     Composite,
                     FilterControlPanel,
                     FilteredGrid,
                     TableWithConfiguration,
                     DataPreviewControlPanel,
                     StoreRqlFilter,
                     RequestMemory,
                     Rest,
                     Trackable,
                     on,
                     TitleGroup,
                     TitlePane,
                     Dialog,
                     ContentPane,
                     DomParser,
                     domConstruct,
                     window,
                     declare,
                     request,
                     lang,
                     domStyle) {

            /* var group = new TitleGroup();
             var firstTable = new TitlePane({open: true, title: "All Notification"});

             group.addChild(firstTable);
             dom.byId("grid").appendChild(group.domNode);

             var notyficationGrid = null;
             var oldType = null;
             var secondTable = null;

             var dialog = new Dialog({
             title: "",
             style: "width: 500px;",
             content: ""
             });

             var tempFilteredGrid = new TableControlPanelFactory('typeNotification');

             on(tempFilteredGrid, "dgrid-select", function (event) {
             var type = event.rows[0].data.type;
             if (oldType !== type) {
             oldType = type;

             if (notyficationGrid === null) {
             secondTable = new TitlePane({open: false, title: ""});
             group.addChild(secondTable);
             }

             secondTable.set("title", type);

             if (notyficationGrid !== null) {
             notyficationGrid.destroy();
             domConstruct.destroy(notyficationGrid.domNode);
             }

             notyficationGrid = new TableControlPanelFactory(type);


             on(notyficationGrid, "dgrid-select", function (event) {
             var xmlData = event.rows[0].data.data;
             var jsonobj = DomParser.parse(xmlData);

             var parse = function (node) {

             var str;
             var nodeStr;
             if (node.childNodes !== undefined
             && node.childNodes !== null) {

             str = "<ul>";
             nodeStr = "<li>";
             nodeStr += "<b>" + node.nodeName + ":</b>";

             array.forEach(node.childNodes, function (item) {
             nodeStr += parse(item);
             });

             if (node.attributes !== null &&
             node.attributes !== undefined &&
             node.attributes.length > 0) {
             nodeStr += "<br>";
             array.forEach(node.attributes, function (item) {
             nodeStr += "<i>" + parse(item) + "</i><br>";
             });
             }

             str += nodeStr += "</li>";
             str += "</ul>";
             } else {
             str = node.nodeName !== "#text" ? node.nodeName + ": " + node.nodeValue : node.nodeValue;
             }

             return str
             };

             dialog.set("title", type);
             dialog.set("content", new ContentPane({
             content: parse(jsonobj),
             }));
             /!*dialog.set("content", parse(jsonobj));*!/
             dialog.show();
             });
             notyficationGrid.startup();
             secondTable.set("content", notyficationGrid.domNode);
             }
             });

             tempFilteredGrid.startup();
             firstTable.set("content", tempFilteredGrid.domNode);*/
            var centralDataStore = new (declare([StoreRqlFilter, Trackable]))({
                'headers': {
                    'Accept': 'application/json'
                },
                'useRangeHeaders': true,
                "target": "/rest/typeNotification"
            });

            var typeNotificationFilterControlPanel = new FilterControlPanel({
                "title": "Панель управления фильтрами ",
                "id": "tableFilter",
                "name": "typeNotification",
                "store": new (declare([Rest, RequestMemory, Trackable]))({
                    'headers': {
                        'Accept': 'application/json'
                    },
                    "target": "/rest/filters_list"
                })
            });

            var typeNotificationFilterGrid = new FilteredGrid({
                "title": "Гистограмма цены выставленных товаров(табличное предствление)",
                "name": "typeNotification",
                "collection": centralDataStore
            });

            var typeNotificationFilterGridTableWithConfiguration = new TableWithConfiguration({
                title: "Спико Уведомлений Ebay",
                table: typeNotificationFilterGrid
            });

            var typeNotificationTableDataPreviewControlPanel = new DataPreviewControlPanel({
                title: "Спико Уведомлений Ebay",
                filterControlPanel: typeNotificationFilterControlPanel,
                dataViewer: typeNotificationFilterGridTableWithConfiguration
            });

            var composite = new Composite({
                components: [typeNotificationTableDataPreviewControlPanel]
            }).placeAt(dom.byId('grid'));

            composite.startup();

            var dialog = new Dialog({
                title: "",
                style: "width: 500px;",
                content: ""
            });

            var oldType = null;
            var secondTable = null;
            var notificationTableDataPreviewControlPanel = null;

            on(typeNotificationFilterGrid, "dgrid-select", function (event) {
                var type = event.rows[0].data.type;
                if (oldType !== type) {
                    oldType = type;

                    if (notificationTableDataPreviewControlPanel === null) {
                        secondTable = new TitlePane({open: false, title: ""});
                        composite.addTitlePane(secondTable);
                    }

                    secondTable.set("title", type);

                    if (notificationTableDataPreviewControlPanel !== null) {
                        notificationTableDataPreviewControlPanel.destroy();
                        domConstruct.destroy(notificationTableDataPreviewControlPanel.domNode);
                    }

                    var notificationDataStore = new (declare([StoreRqlFilter, Trackable]))({
                        'headers': {
                            'Accept': 'application/json'
                        },
                        'useRangeHeaders': true,
                        "target": "/rest/" + type
                    });

                    var notificationFilterControlPanel = new FilterControlPanel({
                        "title": "Панель управления фильтрами ",
                        "id": "notificationTableFilter" + type,
                        "name": type,
                        "store": new (declare([Rest, RequestMemory, Trackable]))({
                            'headers': {
                                'Accept': 'application/json'
                            },
                            "target": "/rest/filters_list"
                        })
                    });

                    var notificationFilterGrid = new FilteredGrid({
                        "title": "Гистограмма цены выставленных товаров(табличное предствление)",
                        "name": type,
                        "collection": notificationDataStore
                    });

                    var notificationFilterGridTableWithConfiguration = new TableWithConfiguration({
                        name: "notification" + type,
                        title: "Спико Уведомлений Ebay",
                        table: notificationFilterGrid
                    });

                    notificationTableDataPreviewControlPanel = new DataPreviewControlPanel({
                        name: "notificasaqtiondTableFilter" + type,
                        title: "Спико Уведомлений Ebay",
                        filterControlPanel: notificationFilterControlPanel,
                        dataViewer: notificationFilterGridTableWithConfiguration
                    });

                    on(notificationFilterGrid, "dgrid-select", function (event) {
                        var xmlData = event.rows[0].data.data;
                        var jsonobj = DomParser.parse(xmlData);

                        var parse = function (node) {

                            var str;
                            var nodeStr;
                            if (node.childNodes !== undefined
                                    && node.childNodes !== null) {

                                str = "<ul>";
                                nodeStr = "<li>";
                                nodeStr += "<b>" + node.nodeName + ":</b>";

                                array.forEach(node.childNodes, function (item) {
                                    nodeStr += parse(item);
                                });

                                if (node.attributes !== null &&
                                        node.attributes !== undefined &&
                                        node.attributes.length > 0) {
                                    nodeStr += "<br>";
                                    array.forEach(node.attributes, function (item) {
                                        nodeStr += "<i>" + parse(item) + "</i><br>";
                                    });
                                }

                                str += nodeStr += "</li>";
                                str += "</ul>";
                            } else {
                                str = node.nodeName !== "#text" ? node.nodeName + ": " + node.nodeValue : node.nodeValue;
                            }

                            return str
                        };

                        dialog.set("title", type);
                        dialog.set("content", new ContentPane({
                            content: parse(jsonobj),
                        }));
                        dialog.show();
                    });
                    notificationTableDataPreviewControlPanel.startup();
                    secondTable.set("content", notificationTableDataPreviewControlPanel.domNode);
                }
            });
        });
    </script>
{% endblock javascripts %}

 {% block mainSideMenu %}

 {% endblock mainSideMenu %}



{% block contentBodyName %} Уведомления {% endblock contentBodyName %}

{% block contentBody %}
    <div id="grid"></div>
{% endblock contentBody %}
